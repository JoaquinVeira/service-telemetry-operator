- name: Create selfsigned Issuer
  k8s:
    definition:
      apiVersion: certmanager.k8s.io/v1alpha1
      kind: Issuer
      metadata:
        name: '{{ meta.namespace }}-selfsigned'
        namespace: '{{ meta.namespace }}'
      spec:
        selfSigned: {}

- name: Create CA certificate
  k8s:
    definition:
      apiVersion: certmanager.k8s.io/v1alpha1
      kind: Certificate
      metadata:
        name: '{{ meta.namespace }}-ca'
        namespace: '{{ meta.namespace }}'
      spec:
        commonName: '{{ meta.namespace }}-ca'
        isCA: true
        issuerRef:
          name: '{{ meta.namespace }}-selfsigned'
        secretName: '{{ meta.namespace }}-ca'

- name: Create namespace CA Issuer
  k8s:
    definition:
      apiVersion: certmanager.k8s.io/v1alpha1
      kind: Issuer
      metadata:
        name: '{{ meta.namespace }}-ca'
        namespace: '{{ meta.namespace }}'
      spec:
        ca:
          secretName: '{{ meta.namespace }}-ca'

- name: Create certificate
  k8s:
    definition:
      apiVersion: certmanager.k8s.io/v1alpha1
      kind: Certificate
      metadata:
        name: '{{ meta.namespace }}-{{ item }}'
        namespace: '{{ meta.namespace }}'
      spec:
        commonName: '{{ item }}'
        secretName: '{{ meta.namespace }}-{{ item }}-credentials'
        dnsNames:
        - '{{ item }}'
        - '{{ item }}.{{ meta.namespace }}.svc'
        - '{{ item }}.{{ meta.namespace}}.cluster.local'
        - '{{ item }}.{{ meta.namespace }}.svc.cluster.local'
        issuerRef:
          kind: Issuer
          name: '{{ meta.namespace }}-ca'
  loop:
    - elasticsearch
    - logging-es
    - admin

- name: Get secret info
  k8s_facts:
    kind: Secret
    name: '{{ meta.namespace }}-elasticsearch-credentials'
    namespace: '{{ meta.namespace }}'
  register: elasticsearch_secret

- debug:
    var: elasticsearch_secret
